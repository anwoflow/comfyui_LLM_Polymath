{
  "last_node_id": 79,
  "last_link_id": 82,
  "nodes": [
    {
      "id": 77,
      "type": "json2text",
      "pos": [
        1851.2430419921875,
        115.19193267822266
      ],
      "size": [
        379.6217346191406,
        56.289615631103516
      ],
      "flags": {
        "collapsed": true
      },
      "order": 1,
      "mode": 0,
      "inputs": [
        {
          "name": "JSON",
          "type": "*",
          "link": 81
        }
      ],
      "outputs": [
        {
          "name": "text",
          "type": "STRING",
          "links": [
            82
          ],
          "slot_index": 0
        }
      ],
      "properties": {
        "Node name for S&R": "json2text",
        "ttNbgOverride": {
          "color": "#222",
          "bgcolor": "#000",
          "groupcolor": "#444"
        }
      },
      "widgets_values": [],
      "color": "#222",
      "bgcolor": "#000"
    },
    {
      "id": 74,
      "type": "ShowText|pysssss",
      "pos": [
        2261.795654296875,
        -587.1124877929688
      ],
      "size": [
        559.403076171875,
        1027.537841796875
      ],
      "flags": {
        "collapsed": false
      },
      "order": 3,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 79,
          "widget": {
            "name": "text"
          }
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "type": "STRING",
          "links": [],
          "slot_index": 0,
          "shape": 6
        }
      ],
      "properties": {
        "Node name for S&R": "ShowText|pysssss"
      },
      "widgets_values": [
        "",
        "The provided \"ComfyUI\" workflow is likely for generating images using text prompts with a focus on encoding both positive and negative prompts. Hereâ€™s a breakdown of the workflow components and how they interact:\n\n### Workflow Overview\n\n1. **Node Types**:\n   - **CLIPTextEncode**: Processes text prompts (both positive and negative) to generate conditioning information for the model.\n   - **EmptySD3LatentImage**: Initializes a latent image with specified dimensions (1024x1024, 1 channel).\n   - **VAEDecode**: Decodes the latent representation into an actual image using a VAE (Variational Autoencoder).\n   - **SaveImage**: Saves the generated image to a specified location.\n   - **KSampler**: Samples images based on the model and the provided conditioning from both positive and negative prompts.\n   - **CheckpointLoaderSimple**: Loads the necessary components (model, CLIP, VAE) for generating images.\n   - **Note**: A note for the user, providing important information about the configuration.\n\n### Detailed Node Breakdown\n\n1. **CheckpointLoaderSimple (Node ID: 30)**:\n   - **Purpose**: Loads the model, CLIP text encoder, and VAE.\n   - **Outputs**: Connects to links for MODEL, CLIP, and VAE for subsequent nodes.\n   - **Widget Value**: Loads a specific model \"flux1-schnell-fp8.safetensors\".\n\n2. **CLIPTextEncode (Positive Prompt) (Node ID: 6)**:\n   - **Purpose**: Encodes the positive prompt into a CONDITIONING format.\n   - **Input**: Takes CLIP from the CheckpointLoader node.\n   - **Output**: Outputs conditioning representation for the positive prompt, linked to the KSampler.\n\n3. **CLIPTextEncode (Negative Prompt) (Node ID: 33)**:\n   - **Purpose**: Encodes the negative prompt.\n   - **Input**: Also takes CLIP from the CheckpointLoader.\n   - **Output**: Outputs conditioning for the negative prompt, linked to the KSampler.\n\n4. **EmptySD3LatentImage (Node ID: 27)**:\n   - **Purpose**: Creates an empty latent image, which is essential for the sampling process.\n   - **Output**: The latent representation is linked to the KSampler.\n\n5. **KSampler (Node ID: 31)**:\n   - **Purpose**: The core component that generates the image based on the model, the positive and negative prompts, and the latent image.\n   - **Inputs**: Combines the conditioning from both prompts and the latent image.\n   - **Outputs**: Produces a latent representation, which is forwarded to the VAE decoding step.\n\n6. **VAEDecode (Node ID: 8)**:\n   - **Purpose**: Converts the latent representation into an actual image.\n   - **Inputs**: Receives the latent representation from the KSampler and the VAE from CheckpointLoader.\n   - **Output**: Produces an output image, which is passed to the SaveImage node.\n\n7. **SaveImage (Node ID: 9)**:\n   - **Purpose**: Saves the output image generated by the VAEDecode step.\n   - **Input**: Takes the image output from the VAEDecode node.\n   - **Widget Value**: The output image is saved with the name \"ComfyUI\".\n\n8. **Note (Node ID: 34)**:\n   - **Purpose**: It provides additional information to the user regarding the configuration settings.\n   - **Content**: Mentions that certain models do not utilize negative prompts and suggests setting CFG to 1.0.\n\n### Links Between Nodes\n- **Linking Mechanics**: Each node interacts through defined links indicating the flow of data:\n  - Output of one node feeds into the input of another, establishing a pipeline from text input to image output.\n  \n### Workflow Summary\nThe main function of this workflow is to convert text prompts (both positive and negative) into a visual representation through a series of processing steps, employing various models and encoders. The output image is saved at the end of the workflow, allowing for user-accessible results.\n\n### Important Notes:\n- Setting the CFG (classifier-free guidance) to 1.0 ensures that negative prompts won't affect the outputs, which is important for certain models like \"schnell\".\n- The workflow is designed for efficient image generation in response to specified textual descriptions. \n\nThis structured approach makes it easier for users to generate specific images based on their needs while considering the impacts of different configurations and model capabilities."
      ],
      "color": "#9952e1",
      "bgcolor": "#000000"
    },
    {
      "id": 79,
      "type": "Read JSON file [Crystools]",
      "pos": [
        1822.9124755859375,
        95.65811920166016
      ],
      "size": [
        419.26605224609375,
        334.8139953613281
      ],
      "flags": {},
      "order": 0,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "json",
          "type": "JSON",
          "links": [
            81
          ],
          "slot_index": 0
        }
      ],
      "properties": {
        "Node name for S&R": "Read JSON file [Crystools]"
      },
      "widgets_values": [
        "C:/Users/RAIIN Studios/Downloads/Flux Schnell.json",
        "C:/Users/RAIIN Studios/Downloads/Flux Schnell.json"
      ],
      "color": "#49a528",
      "bgcolor": "#000000"
    },
    {
      "id": 41,
      "type": "polymath_chat",
      "pos": [
        1815.6025390625,
        -584.7335205078125
      ],
      "size": [
        430.873046875,
        627.7433471679688
      ],
      "flags": {},
      "order": 2,
      "mode": 0,
      "inputs": [
        {
          "name": "image",
          "type": "IMAGE",
          "link": null,
          "shape": 7
        },
        {
          "name": "additional_text",
          "type": "STRING",
          "link": 82,
          "widget": {
            "name": "additional_text"
          }
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "type": "STRING",
          "links": [
            79
          ],
          "slot_index": 0
        }
      ],
      "properties": {
        "Node name for S&R": "polymath_chat"
      },
      "widgets_values": [
        "explain this comfyui workflow to me.",
        "",
        551,
        "randomize",
        "gpt-4o-mini",
        "None",
        false,
        true,
        7,
        false,
        false,
        "soft",
        true
      ],
      "color": "#c1a12f",
      "bgcolor": "#000000",
      "shape": 2
    }
  ],
  "links": [
    [
      79,
      41,
      0,
      74,
      0,
      "STRING"
    ],
    [
      81,
      79,
      0,
      77,
      0,
      "*"
    ],
    [
      82,
      77,
      0,
      41,
      1,
      "STRING"
    ]
  ],
  "groups": [
    {
      "id": 7,
      "title": "Comfy smart assistant",
      "bounding": [
        1793.74365234375,
        -712.2714233398438,
        1039.689453125,
        1170.714111328125
      ],
      "color": "#3f789e",
      "font_size": 54,
      "flags": {}
    }
  ],
  "config": {},
  "extra": {
    "ds": {
      "scale": 1.7449402268886445,
      "offset": [
        -1824.893573345847,
        464.8039152587694
      ]
    },
    "node_versions": {
      "comfyui_llm_party": "abe39b7d34a612f0d01dfe10b34bcb9c42f75fa4",
      "comfyui-custom-scripts": "1.1.0",
      "comfyui-crystools": "1.22.0",
      "comfyui_LLM_Polymath": "7ad85e7feac114997edeaf96773ee88616b22731"
    },
    "info": {
      "name": "workflow",
      "author": "",
      "description": "",
      "version": "1",
      "created": "2025-02-11T00:30:35.295Z",
      "modified": "2025-02-11T00:30:35.295Z",
      "software": "ComfyUI"
    }
  },
  "version": 0.4
}
